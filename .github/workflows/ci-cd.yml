name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean compile -DskipTests

      - name: Run tests
        run: mvn test

      - name: Package application
        run: mvn package -DskipTests

  build-docker-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t monitor-app:latest .

      - name: Run container tests
        run: |
          docker run -d --name test-container -p 8080:8080 monitor-app:latest
          sleep 30
          curl -f http://localhost:8080/actuator/health || exit 1
          docker stop test-container

  deploy-staging:
    needs: build-docker-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          docker-compose -f docker-compose.yml up -d
          echo "ðŸš€ Application deployed to STAGING environment"

  deploy-production:
    needs: build-docker-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          docker-compose -f docker-compose.production.yml up -d
          echo "ðŸŽ‰ Application deployed to PRODUCTION environment"