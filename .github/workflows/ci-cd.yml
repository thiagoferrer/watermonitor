name: CI/CD with PostgreSQL and Docker

on:
  push:
    branches: [ main, develop ]

env:
  IMAGE_NAME: medicao-api

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: monitor_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and test with PostgreSQL
        run: |
          mvn clean compile
          mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/monitor_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: password123

      - name: Build JAR package
        run: mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:$GITHUB_SHA .

      - name: Run container integration test
        run: |
          docker run -d --name test-db \
            -e POSTGRES_DB=monitor_db \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=password123 \
            -p 5433:5432 \  # ‚úÖ Mudei para porta 5433 para evitar conflito
            postgres:13
          
          sleep 20
          
          docker run -d \
            --name test-api \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5433/monitor_db \  # ‚úÖ Conecta na porta 5433
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=password123 \
            -p 8080:8080 \
            $IMAGE_NAME:$GITHUB_SHA
          
          sleep 30
          
          curl -f http://localhost:8080/api/medicoes || exit 1
          
          docker stop test-api test-db
          docker rm test-api test-db

  # ‚úÖ Job de DEBUG para verificar o contexto do GitHub
  debug-context:
    runs-on: ubuntu-latest
    steps:
      - name: Show Full GitHub Context
        run: |
          echo "üîç FULL GITHUB CONTEXT DEBUG:"
          echo "=== BRANCH INFORMATION ==="
          echo "GitHub Ref: '${{ github.ref }}'"
          echo "GitHub Base Ref: '${{ github.base_ref }}'"
          echo "GitHub Head Ref: '${{ github.head_ref }}'"
          echo "GitHub Event: '${{ github.event_name }}'"
          echo "GitHub SHA: '${{ github.sha }}'"
          echo ""
          echo "=== CONDITION CHECKS ==="
          echo "Is main branch: '${{ github.ref == 'refs/heads/main' }}'"
          echo "Is develop branch: '${{ github.ref == 'refs/heads/develop' }}'"
          echo "Contains 'main': '${{ contains(github.ref, 'main') }}'"
          echo "Contains 'develop': '${{ contains(github.ref, 'develop') }}'"
          echo ""
          echo "=== FULL CONTEXT ==="
          echo '${{ toJSON(github) }}'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, debug-context]  # ‚úÖ Agora depende do debug tamb√©m
    if: always()  # ‚úÖ EXECUTA SEMPRE para debug

    steps:
      - name: Debug Staging Branch Info
        run: |
          echo "üîç STAGING DEBUG:"
          echo "GitHub Ref: '${{ github.ref }}'"
          echo "Expected: 'refs/heads/develop'"
          echo "Condition: ${{ github.ref == 'refs/heads/develop' }}"
          echo "Should deploy to staging: ${{ github.ref == 'refs/heads/develop' }}"

      - name: Deploy to Staging
        run: |
          echo "üì¶ Deploying to STAGING environment"
          echo "‚úÖ STAGING DEPLOYMENT TRIGGERED"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, debug-context]  # ‚úÖ Agora depende do debug tamb√©m
    if: always()  # ‚úÖ EXECUTA SEMPRE para debug

    steps:
      - name: Debug Production Branch Info
        run: |
          echo "üîç PRODUCTION DEBUG:"
          echo "GitHub Ref: '${{ github.ref }}'"
          echo "Expected: 'refs/heads/main'"
          echo "Condition: ${{ github.ref == 'refs/heads/main' }}"
          echo "Should deploy to production: ${{ github.ref == 'refs/heads/main' }}"

      - name: Deploy to Production
        run: |
          echo "üéØ Deploying to PRODUCTION environment"
          echo "‚úÖ PRODUCTION DEPLOYMENT TRIGGERED"