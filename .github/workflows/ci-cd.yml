name: CI/CD with PostgreSQL and Docker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: monitor_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432  # ✅ Mudar para porta padrão

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # ✅ DEBUG: Testar conexão PostgreSQL
      - name: Test PostgreSQL connection
        run: |
          sudo apt-get install -y postgresql-client
          echo "Aguardando PostgreSQL..."
          sleep 15
          pg_isready -h localhost -p 5432 -U postgres

      - name: Build with Maven
        run: mvn clean package -DskipTests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/monitor_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: password123

      - name: Build Docker image
        run: |
          docker build -t monitor-app:$GITHUB_SHA .
          docker images

      # ✅ CORREÇÃO SIMPLIFICADA: Usar host.docker.internal
      - name: Test Docker container
        run: |
          # Rodar a aplicação com acesso ao host
          docker run -d --name test-app \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/monitor_db \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=password123 \
            -p 8080:8080 \
            --add-host=host.docker.internal:host-gateway \
            monitor-app:$GITHUB_SHA
          
          echo "Aguardando aplicação iniciar..."
          sleep 60  # ✅ Tempo maior para inicialização
          
          # Teste de saúde com múltiplas tentativas
          echo "Testando health check..."
          for i in {1..5}; do
            if curl -f http://localhost:8080/actuator/health; then
              echo "✅ Health check passou!"
              break
            else
              echo "❌ Tentativa $i falhou, aguardando..."
              sleep 15
            fi
          done
          
          # Se todas as tentativas falharem, mostrar logs
          curl -f http://localhost:8080/actuator/health || \
          (echo "❌ Health check final falhou" && docker logs test-app && exit 1)

      - name: Logs on failure
        if: failure()
        run: |
          echo "=== LOGS DA APLICAÇÃO ==="
          docker logs test-app
          echo "=== CONTAINERS ATIVOS ==="
          docker ps -a

      - name: Cleanup
        if: always()
        run: |
          docker stop test-app || true
          docker rm test-app || true