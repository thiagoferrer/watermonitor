name: CI/CD Pipeline - Staging and Production

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # JOB 1: BUILD AND TEST
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build application
        run: mvn clean compile
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Run unit tests
        run: mvn test
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Run integration tests
        run: mvn verify -DskipUnitTests
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Build JAR package
        run: mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v3  # CORREÃ‡ÃƒO: Mudado para v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # JOB 2: DEPLOY TO STAGING
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop' || github.event_name == 'push'

    environment:
      name: staging
      url: https://staging.monitor-app.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "Deploying to Staging Environment"
          docker-compose -f docker-compose.staging.yml up -d
          echo "Application deployed to staging"
          
          # Health check
          sleep 30
          curl -f http://localhost:8081/actuator/health || exit 1

      - name: Run staging tests
        run: |
          echo "Running staging environment tests..."
          # Testes especÃ­ficos do ambiente staging
          curl -s http://localhost:8081/actuator/info | grep -q "staging" && echo "âœ… Staging environment confirmed"

  # JOB 3: DEPLOY TO PRODUCTION
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'release' && github.event.action == 'published'

    environment:
      name: production
      url: https://monitor-app.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "ðŸš€ Deploying to Production Environment"
          docker-compose -f docker-compose.production.yml up -d
          echo "Application deployed to production"
          
          # Health check
          sleep 30
          curl -f https://monitor-app.com/actuator/health || exit 1

      - name: Production verification
        run: |
          echo "Running production verification..."
          # VerificaÃ§Ãµes pÃ³s-deploy
          curl -s https://monitor-app.com/actuator/info | grep -q "production" && echo "âœ… Production deployment successful"