name: CI/CD with PostgreSQL and Docker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: monitor_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests
        env:
          SPRING_PROFILES_ACTIVE: dev
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/monitor_db

      - name: Build Docker image
        run: |
          docker build -t monitor-app:$GITHUB_SHA .
          docker images

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          echo "PostgreSQL is ready!"

      - name: Test database connection
        run: |
          docker run --rm -it --network=host postgres:13 psql -h localhost -U postgres -d monitor_db -c "SELECT version();"

      - name: Test with Docker Compose
        run: |
          # Criar docker-compose para testes
          cat > docker-compose.test.yml << EOF
          version: '3.8'
          services:
            postgres:
              image: postgres:13
              container_name: test-postgres
              environment:
                POSTGRES_DB: monitor_db
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: password123
              ports:
                - "5433:5432"
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 10

            app:
              image: monitor-app:$GITHUB_SHA
              container_name: test-app
              environment:
                SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/monitor_db
                SPRING_DATASOURCE_USERNAME: postgres
                SPRING_DATASOURCE_PASSWORD: password123
                SPRING_JPA_HIBERNATE_DDL_AUTO: update
                SERVER_PORT: 8080
                SPRING_PROFILES_ACTIVE: docker
              ports:
                - "8080:8080"
              depends_on:
                postgres:
                  condition: service_healthy
              restart: unless-stopped
          EOF

          # Iniciar serviços
          docker-compose -f docker-compose.test.yml up -d
          
          echo "Aguardando aplicação iniciar..."
          sleep 30
          
          # Teste de saúde da aplicação
          echo "Testando saúde da aplicação..."
          curl -f http://localhost:8080/actuator/health || (echo "Health check failed. Container logs:" && docker logs test-app && exit 1)
          
          # Teste adicional - verificar se consegue acessar o banco
          echo "Testando conexão com o banco através da aplicação..."
          curl -s http://localhost:8080/actuator/health | grep -q "UP" && echo "✅ Aplicação está UP e conectada ao banco"

      - name: Run integration tests
        run: |
          # Executar testes de integração se existirem
          mvn test -Dspring.profiles.active=test -Dspring.datasource.url=jdbc:postgresql://localhost:5432/monitor_db || echo "No integration tests found"

      - name: Debug and logs
        if: failure()
        run: |
          echo "=== Application Logs ==="
          docker logs test-app || true
          echo "=== PostgreSQL Logs ==="
          docker logs test-postgres || true
          echo "=== Docker Containers ==="
          docker ps -a
          echo "=== Docker Compose Status ==="
          docker-compose -f docker-compose.test.yml ps

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up containers..."
          docker stop test-app test-postgres || true
          docker rm test-app test-postgres || true
          docker-compose -f docker-compose.test.yml down || true
          docker system prune -f || true